import streamlit as st
import pandas as pd
import requests
from PIL import Image
from io import BytesIO

# Configuration de la page
st.set_page_config(
    page_title="Projet Viticulture",
    page_icon="üç∑",
    layout="wide"
)
# =============================================
# Configuration de base
# =============================================
st.set_page_config(page_title="BouteillIA", layout="wide")

# =============================================
# Fonctions utilitaires
# =============================================
def display_bio_badge():
    """Affiche le badge bio"""
    st.markdown('<span style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 15px;">Vin Bio</span>', unsafe_allow_html=True)

def load_image(url):
    """Charge une image depuis une URL"""
    try:
        if pd.isna(url) or url == 'nan':
            return None
            
        # Nettoyer l'URL
        url = url.strip()
        if not url.startswith('http'):
            url = 'https://www.vinatis.com/' + url
            
        # T√©l√©charger l'image
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return Image.open(BytesIO(response.content))
        else:
            st.error(f"Erreur HTTP {response.status_code} pour l'URL: {url}")
            return None
    except Exception as e:
        st.error(f"Erreur lors du chargement de l'image: {str(e)}")
        return None

# =============================================
# Chargement des donn√©es
# =============================================
@st.cache_data
def load_data():
    """Charge les donn√©es des vins"""
    df = pd.read_csv('base_vin_final.csv')
    df['bio'] = df['bio'].apply(lambda x: 1 if pd.notna(x) and 'Certifi√© Eurofeuille' in str(x) else 0)
    
    # Si la colonne visuel n'existe pas, on la cr√©e avec une image par d√©faut
    if 'visuel' not in df.columns:
        df['visuel'] = "https://www.vinatis.com/1-detail_default/default-wine.png"
    else:
        # Corriger le format des URLs des images
        df['visuel'] = df['visuel'].apply(lambda x: f"https://www.vinatis.com/{x}" if pd.notna(x) and not str(x).startswith('http') else x)
    
    # Convertir toutes les colonnes en string sauf prix
    for col in df.columns:
        if col != 'prix':  # Ne pas convertir la colonne prix
            df[col] = df[col].astype(str)
    
    # S'assurer que la colonne prix est en float
    df['prix'] = pd.to_numeric(df['prix'], errors='coerce')
    
    return df

# =============================================
# Interface utilisateur
# =============================================
def display_wine_info(vin, show_recommendations=False):
    """Affiche les informations d'un vin"""
    # Affichage de l'image
    if pd.notna(vin['visuel']) and vin['visuel'] != 'nan':
        image = load_image(vin['visuel'])
        if image:
            st.image(image, width=300, caption=vin['nom'])
        else:
            st.warning("Impossible de charger l'image")
    else:
        st.warning("Pas d'image disponible pour ce vin")
    
    # Informations du vin
    st.markdown(f"### {vin['nom']} - {vin['prix']}‚Ç¨")
    st.write(f"**Pays:** {vin['pays']}")
    st.write(f"**R√©gion:** {vin['region']}")
    st.write(f"**Couleur:** {vin['couleur']}")
    st.write(f"**Degr√© d'alcool:** {vin['deg_alcool']}%")
    
    # Badge bio si applicable
    if vin['bio'] == '1':
        display_bio_badge()
    
    # Accords mets et vins
    if pd.notna(vin['accords']) and vin['accords'] != 'nan':
        accords = vin['accords'].replace('[', '').replace(']', '').replace("'", '')
        st.write(f"**Accords mets et vins:** {accords}")
    
    # Description
    if pd.notna(vin['desc']) and vin['desc'] != 'nan':
        st.write(f"**Description:** {vin['desc']}")
    
    # Bouton pour afficher les recommandations
    if not show_recommendations:
        if st.button(f"Voir les recommandations pour {vin['nom']}", key=f"reco_{vin['nom']}"):
            st.session_state.selected_wine = vin
            st.session_state.show_recommendations = True
            st.rerun()

def display_recommendations(selected_wine):
    """Affiche les vins recommand√©s"""
    st.markdown("### üç∑ Vins recommand√©s")
    
    # Cr√©er une grille de 2 colonnes pour les recommandations
    col1, col2 = st.columns(2)
    
    # Afficher les 4 vins recommand√©s
    for i in range(1, 5):
        reco_col = 'reco' + str(i)
        if reco_col in df.columns and pd.notna(selected_wine[reco_col]):
            # Trouver le vin recommand√© dans le DataFrame
            reco_wine = df[df['nom'] == selected_wine[reco_col]].iloc[0]
            
            # Alterner entre les colonnes
            with col1 if i % 2 == 1 else col2:
                st.markdown("---")
                display_wine_info(reco_wine, show_recommendations=True)
    
    # Bouton pour revenir aux r√©sultats
    if st.button("Retour aux r√©sultats"):
        st.session_state.show_recommendations = False
        st.rerun()

# =============================================
# Chargement des donn√©es
# =============================================
df = load_data()

# =============================================
# Navigation et pages
# =============================================
st.sidebar.title("BouteillIA")
page = st.sidebar.radio("Navigation", ["Accueil", "Recherche", "R√©sultats"])
st.session_state.page = page

# Page d'accueil
if page == "Accueil":
    st.title("üç∑ BouteillIA")
    st.subheader("Bienvenue")
    
    st.write("""
    D√©couvrez notre s√©lection de vins soigneusement choisis. Utilisez la barre de navigation pour :
    
    - Explorer notre catalogue
    - Rechercher des vins selon vos crit√®res
    - Voir les r√©sultats de votre recherche
    """)
    
    # Statistiques
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Nombre de vins", len(df))
    with col2:
        st.metric("Pays repr√©sent√©s", len(df['pays'].unique()))

# Page de recherche
elif page == "Recherche":
    st.title("üç∑ BouteillIA")
    st.header("Recherche de vins")
    
    # Filtres de recherche
    col1, col2 = st.columns(2)
    
    with col1:
        # Nettoyer et trier les listes en g√©rant les NaN
        pays_list = ["Tous"] + sorted([str(x) for x in df['pays'].dropna().unique()])
        couleur_list = ["Tous"] + sorted([str(x) for x in df['couleur'].dropna().unique()])
        nom_list = ["Tous"] + sorted([str(x) for x in df['nom'].dropna().unique()])
        
        recherche_nom = st.selectbox("Rechercher un vin par son nom", nom_list)
        pays = st.selectbox("Pays", pays_list)
        couleur = st.selectbox("Couleur du vin", couleur_list)
        
        # Accords mets et vins
        all_accords = []
        for accords in df['accords'].dropna():
            accords_list = accords.replace('[', '').replace(']', '').replace("'", '').split(', ')
            all_accords.extend(accords_list)
        
        selected_accords = st.multiselect(
            "Accords mets et vins",
            options=sorted(list(set(all_accords))),
            help="S√©lectionnez un ou plusieurs accords mets et vins"
        )
        
        bio = st.checkbox("Vins bio uniquement")
    
    # Slider de prix en pleine largeur
    prix_min = float(df['prix'].min())
    prix_max = float(df['prix'].max())
    prix_range = st.slider(
        "Prix (‚Ç¨)",
        min_value=prix_min,
        max_value=prix_max,
        value=(prix_min, prix_max),
        step=1.0,
        help="S√©lectionnez une fourchette de prix"
    )
    prix_min, prix_max = prix_range
    
    # Recherche
    if st.button("Rechercher"):
        resultats = df.copy()
        
        # Application des filtres
        if recherche_nom != "Tous":
            resultats = resultats[resultats['nom'].astype(str) == recherche_nom]
        if pays != "Tous":
            resultats = resultats[resultats['pays'].astype(str) == pays]
        if couleur != "Tous":
            resultats = resultats[resultats['couleur'].astype(str) == couleur]
        if bio:
            resultats = resultats[resultats['bio'] == 1]
        resultats = resultats[(resultats['prix'] >= prix_min) & (resultats['prix'] <= prix_max)]
        
        if selected_accords:
            mask = resultats['accords'].apply(lambda x: any(accord in str(x) for accord in selected_accords))
            resultats = resultats[mask]
        
        st.session_state.resultats = resultats
        st.session_state.page = "R√©sultats"
        st.rerun()

# Page des r√©sultats
elif page == "R√©sultats":
    st.title("üç∑ BouteillIA")
    st.header("R√©sultats de la recherche")
    
    if 'resultats' in st.session_state and not st.session_state.resultats.empty:
        resultats = st.session_state.resultats
        
        # V√©rifier si on doit afficher les recommandations
        if 'show_recommendations' in st.session_state and st.session_state.show_recommendations:
            display_recommendations(st.session_state.selected_wine)
        else:
            st.write(f"Nombre de vins trouv√©s : {len(resultats)}")
            
            for _, vin in resultats.iterrows():
                st.markdown("---")
                display_wine_info(vin)
    else:
        st.info("Aucun r√©sultat √† afficher. Veuillez effectuer une recherche.")
        if st.button("Retour √† la recherche"):
            st.session_state.page = "Recherche"
            st.rerun()
import base64



# Fonction pour charger et afficher une image en base64
def load_image(image_path):
    with open(image_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()
    return f"data:image/png;base64,{encoded_string}"

# CSS personnalis√©
st.markdown("""
<style>
    /* Couleurs inspir√©es du vin */
    :root {
        --wine-red: #722F37;
        --wine-burgundy: #4E1609;
        --wine-gold: #C1A87D;
        --wine-cream: #F2E8DC;
    }
    
    .sidebar .sidebar-content {
        background-color: var(--wine-burgundy);
        color: var(--wine-cream);
    }
    
    h1 {
        color: var(--wine-red);
        font-family: 'Playfair Display', serif;
    }
    
    .main-text {
        color: #333;
        font-size: 18px;
        line-height: 1.6;
        margin: 20px 0;
    }
    
    .logo-container {
        text-align: center;
        padding: 20px;
    }
</style>
""", unsafe_allow_html=True)

# Menu lat√©ral
with st.sidebar:
    st.title("üç∑ Navigation")
    page = st.radio(
        "Choisissez une page",
        ["Pr√©sentation et KPI", "Filtrage des vins", "Recommandation"]
    )

# Contenu principal de la page de pr√©sentation
if page == "Pr√©sentation et KPI":
    st.title("Bienvenue sur notre Projet Viticulture")
    
    # Emplacement pour le logo (√† remplacer par votre propre logo)
    st.markdown("""
    <div class="logo-container">
        <img src="chemin_vers_votre_logo.png" alt="Logo Viticulture" style="max-width: 300px;">
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="main-text">
        <h2>Notre Projet</h2>
        <p>
        Bienvenue dans notre projet d√©di√© √† l'univers passionnant de la viticulture. 
        Notre √©quipe a d√©velopp√© une plateforme innovante combinant expertise viticole 
        et intelligence artificielle pour vous offrir une exp√©rience unique de d√©couverte 
        et de recommandation de vins.
        </p>
        
        <h2>Notre √âquipe</h2>
        <p>
        Notre √©quipe est compos√©e de passionn√©s de data science et d'≈ìnologie, 
        r√©unissant leurs comp√©tences pour cr√©er un outil intelligent de recommandation 
        de vins. Nous utilisons des algorithmes de machine learning sophistiqu√©s pour 
        analyser les caract√©ristiques des vins et proposer des recommandations personnalis√©es.
        </p>
        
        <h2>Fonctionnalit√©s Principales</h2>
        <ul>
            <li>Exploration d√©taill√©e de notre base de donn√©es de vins</li>
            <li>Syst√®me de filtrage avanc√©</li>
            <li>Recommandations personnalis√©es bas√©es sur l'intelligence artificielle</li>
            <li>Visualisation interactive des donn√©es</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

elif page == "Filtrage des vins":
    st.title("Filtrage des vins")
    st.write("Cette section est en cours de d√©veloppement...")

elif page == "Recommandation":
    st.title("Syst√®me de recommandation")
    st.write("Cette section est en cours de d√©veloppement...") 



